--
-- DROP DATABASE IF EXISTS user_dev;
--
-- CREATE DATABASE user_dev
--     OWNER "wqSysadmin"
--     ENCODING 'UTF8'
--     LC_COLLATE='en_US.UTF-8'
--     LC_CTYPE='en_US.UTF-8'
--     TEMPLATE template0;
drop function update_updated_at_column;
-- üåç B·∫£ng Role (Ch·ª©a c√°c vai tr√≤: system_admin, station_admin, users)
DROP TABLE IF EXISTS "role" CASCADE;
CREATE TABLE "role" (
    "id" SERIAL PRIMARY KEY,
    "name" VARCHAR(50) NOT NULL UNIQUE,
    "description" VARCHAR(255) NOT NULL,
    "created_at" TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    "updated_at" TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- üöÄ B·∫£ng Permission (Quy·ªÅn c·ªßa t·ª´ng Role)
DROP TABLE IF EXISTS "permission" CASCADE;
CREATE TABLE "permission" (
    "id" SERIAL PRIMARY KEY,
    "name" VARCHAR(100) NOT NULL UNIQUE,
    "description" TEXT NOT NULL,
    "station_id" INTEGER NOT NULL,
    "created_at" TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    "updated_at" TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    "display_name" VARCHAR(255) NOT NULL,
    "role_id" INTEGER NOT NULL  -- üî• Ch∆∞a c√≥ FOREIGN KEY
);

-- üè¢ B·∫£ng T·ªï Ch·ª©c (Tr·∫°m Quan Tr·∫Øc)
DROP TABLE IF EXISTS "org" CASCADE;
CREATE TABLE "org" (
    "id" SERIAL PRIMARY KEY,
    "name" VARCHAR(255) NOT NULL,
    "address" VARCHAR(255),
    "city" VARCHAR(255),
    "country" VARCHAR(255),
    "created_at" TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    "updated_at" TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    "station_id" INTEGER NOT NULL
);

-- üõ† X√≥a b·∫£ng n·∫øu ƒë√£ t·ªìn t·∫°i
DROP TABLE IF EXISTS "users" CASCADE;

-- üë§ T·∫°o b·∫£ng Users
CREATE TABLE "users" (
    "id" SERIAL PRIMARY KEY,
    "created_at" TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    "updated_at" TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    "email" VARCHAR(255) NOT NULL UNIQUE,
    "username" VARCHAR(255) UNIQUE,
    "full_name" VARCHAR(255) NOT NULL,
    "password_hash" TEXT NOT NULL, -- üî• Th√™m c·ªôt m·∫≠t kh·∫©u m√£ h√≥a
    "email_verified" BOOLEAN DEFAULT FALSE,
    "last_seen_at" TIMESTAMPTZ DEFAULT NULL,
    "status" VARCHAR(50) NOT NULL DEFAULT 'active',
    "is_admin" BOOLEAN DEFAULT FALSE,
    "kong_consumer_id" UUID DEFAULT NULL UNIQUE, -- Mapping v·ªõi Kong n·∫øu d√πng Key Auth
    CONSTRAINT chk_status CHECK (status IN ('active', 'inactive', 'banned')) -- ƒê·∫£m b·∫£o gi√° tr·ªã h·ª£p l·ªá
);

-- üîó B·∫£ng G√°n User v√†o Role
DROP TABLE IF EXISTS "user_role" CASCADE;
CREATE TABLE "user_role" (
    "id" SERIAL PRIMARY KEY,
    "org_id" INTEGER NOT NULL, -- üî• Ch∆∞a c√≥ FOREIGN KEY
    "role_id" INTEGER NOT NULL, -- üî• Ch∆∞a c√≥ FOREIGN KEY
    "created_at" TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    "user_id" INTEGER NOT NULL -- üî• Ch∆∞a c√≥ FOREIGN KEY
);

-- üîó B·∫£ng User thu·ªôc T·ªï Ch·ª©c (org_user)
DROP TABLE IF EXISTS "org_user" CASCADE;
CREATE TABLE "org_user" (
    "id" SERIAL PRIMARY KEY,
    "org_id" INTEGER NOT NULL, -- üî• Ch∆∞a c√≥ FOREIGN KEY
    "user_id" INTEGER NOT NULL, -- üî• Ch∆∞a c√≥ FOREIGN KEY
    "role" VARCHAR(50) NOT NULL
);

-- üõ† B·∫£ng L∆∞u OAuth Provider (SSO)
DROP TABLE IF EXISTS "user_sso" CASCADE;
CREATE TABLE "user_sso" (
    "id" SERIAL PRIMARY KEY,
    "user_id" INTEGER NOT NULL, -- üî• Ch∆∞a c√≥ FOREIGN KEY
    "auth_provider" VARCHAR(50) NOT NULL CHECK (auth_provider IN ('google', 'github', 'microsoft')),
    "auth_id" VARCHAR(255) NOT NULL UNIQUE,
    "created_at" TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- ‚öôÔ∏è B·∫£ng C·∫•u H√¨nh SSO
DROP TABLE IF EXISTS "sso_setting" CASCADE;
CREATE TABLE "sso_setting" (
    "id" SERIAL PRIMARY KEY,
    "provider" VARCHAR(255) NOT NULL UNIQUE,
    "settings" TEXT NOT NULL,
    "created_at" TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    "updated_at" TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    "is_deleted" BOOLEAN NOT NULL DEFAULT FALSE
);

-- üîí B·∫£ng Ghi Log Th·ª≠ ƒêƒÉng Nh·∫≠p (Login Attempt)
DROP TABLE IF EXISTS "login_attempt" CASCADE;
CREATE TABLE "login_attempt" (
    "id" SERIAL PRIMARY KEY,
    "username" VARCHAR(255) NOT NULL,
    "ip_address" INET NOT NULL,
    "created_at" TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

DROP TABLE IF EXISTS "user_refresh_token" CASCADE;
CREATE TABLE "user_refresh_token" (
    "id" SERIAL PRIMARY KEY,
    "user_id" INTEGER NOT NULL REFERENCES "users"("id") ON DELETE CASCADE,
    "refresh_token" TEXT NOT NULL UNIQUE,
    "created_at" TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    "expires_at" TIMESTAMPTZ NOT NULL
);

-- DROP TABLE IF EXISTS "user_auth_token" CASCADE;
-- CREATE TABLE "user_auth_token" (
--     "id" SERIAL NOT NULL UNIQUE,
--     "user_id" INTEGER NOT NULL,
--     "auth_token" TEXT NOT NULL,             -- Access token
--     "prev_auth_token" TEXT NOT NULL,        -- Token c≈© n·∫øu c√≥
--     "client_ip" VARCHAR(255) NOT NULL,      -- IP client ƒëƒÉng nh·∫≠p
--     "auth_token_seen" INTEGER NOT NULL,     -- S·ªë l·∫ßn nh√¨n th·∫•y token
--     "seen_at" TIMESTAMP,                    -- Th·ªùi gian l·∫ßn cu·ªëi token ƒë∆∞·ª£c nh√¨n th·∫•y
--     "rotated_at" TIMESTAMP NOT NULL,        -- Th·ªùi gian token b·ªã thay th·∫ø
--     "updated_at" TIMESTAMP NOT NULL,        -- Th·ªùi gian c·∫≠p nh·∫≠t token
--     "revoked_at" TIMESTAMP,                 -- Th·ªùi gian revoke token
--     "external_session_id" INTEGER,          -- ID c·ªßa session t·ª´ h·ªá th·ªëng b√™n ngo√†i (v√≠ d·ª•: OAuth2)
--     PRIMARY KEY("id")
-- );

-- DROP TABLE IF EXISTS "user_external_session" CASCADE;
-- CREATE TABLE "user_external_session" (
--     "id" SERIAL NOT NULL UNIQUE,
--     "user_auth_id" INTEGER NOT NULL,  -- Li√™n k·∫øt v·ªõi user_auth_token
--     "user_id" INTEGER NOT NULL,       -- Li√™n k·∫øt v·ªõi user
--     "id_token" TEXT,                  -- OAuth2 ID token
--     "refresh_token" TEXT,             -- Refresh token
--     "session_id" TEXT,                -- Session ID
--     "session_id_hash" TEXT,           -- Hash c·ªßa session ID ƒë·ªÉ b·∫£o m·∫≠t
--     "name_id" TEXT,                   -- ID c·ªßa ng∆∞·ªùi d√πng t·ª´ OAuth2
--     "expires_at" TIMESTAMP,           -- Th·ªùi gian h·∫øt h·∫°n c·ªßa refresh token
--     "created_at" TIMESTAMP NOT NULL,  -- Th·ªùi gian t·∫°o session
--     PRIMARY KEY("id")
-- );

-- üõ† Function Auto-update updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- üìå T·∫°o Triggers ƒë·ªÉ Auto-update updated_at
CREATE TRIGGER trg_update_user_updated_at
BEFORE UPDATE ON "users"
FOR EACH ROW
EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER trg_update_role_updated_at
BEFORE UPDATE ON "role"
FOR EACH ROW
EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER trg_update_permission_updated_at
BEFORE UPDATE ON "permission"
FOR EACH ROW
EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER trg_update_org_updated_at
BEFORE UPDATE ON "org"
FOR EACH ROW
EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER trg_update_user_role_updated_at
BEFORE UPDATE ON "user_role"
FOR EACH ROW
EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER trg_update_org_user_updated_at
BEFORE UPDATE ON "org_user"
FOR EACH ROW
EXECUTE PROCEDURE update_updated_at_column();


-- üåç Th√™m c√°c vai tr√≤ (roles)
INSERT INTO "role" ("name", "description", "created_at") VALUES
('system_admin', 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng, c√≥ to√†n quy·ªÅn', NOW()),
('station_admin', 'Admin c·ªßa m·ªôt tr·∫°m quan tr·∫Øc, c√≥ quy·ªÅn qu·∫£n l√Ω d·ªØ li·ªáu c·ªßa tr·∫°m ƒë√≥', NOW()),
('users', 'Ng∆∞·ªùi d√πng th√¥ng th∆∞·ªùng, ch·ªâ c√≥ quy·ªÅn xem d·ªØ li·ªáu v√† qu·∫£n l√Ω th√¥ng b√°o c√° nh√¢n', NOW());

-- üöÄ Th√™m quy·ªÅn h·∫°n (permissions)
INSERT INTO "permission" ("name", "description", "station_id", "created_at", "updated_at", "display_name", "role_id") VALUES
-- System Admin
('manage_all', 'Qu·∫£n l√Ω to√†n b·ªô h·ªá th·ªëng', 0, NOW(), NOW(), 'Qu·∫£n l√Ω H·ªá th·ªëng', 1),
('view_all_reports', 'Xem to√†n b·ªô b√°o c√°o tr√™n h·ªá th·ªëng', 0, NOW(), NOW(), 'Xem T·∫•t c·∫£ B√°o c√°o', 1),

-- Station Admin
('upload_station_data', 'Upload d·ªØ li·ªáu c·ªßa tr·∫°m quan tr·∫Øc', 1, NOW(), NOW(), 'T·∫£i l√™n d·ªØ li·ªáu tr·∫°m', 2),
('manage_station_users', 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng trong tr·∫°m', 1, NOW(), NOW(), 'Qu·∫£n l√Ω User Tr·∫°m', 2),
('generate_reports', 'T·∫°o b√°o c√°o ch·∫•t l∆∞·ª£ng n∆∞·ªõc', 1, NOW(), NOW(), 'T·∫°o B√°o c√°o', 2),

-- User th∆∞·ªùng
('manage_alerts', 'T·∫°o v√† qu·∫£n l√Ω c·∫£nh b√°o c√° nh√¢n', 0, NOW(), NOW(), 'Qu·∫£n l√Ω C·∫£nh b√°o', 3),
('schedule_reports', 'L√™n l·ªãch b√°o c√°o c√° nh√¢n', 0, NOW(), NOW(), 'L√™n L·ªãch B√°o c√°o', 3);

INSERT INTO "org" (id, name, address, city, country, created_at, updated_at, station_id)
VALUES (0, 'No Organization', NULL, NULL, NULL, NOW(), NOW(), 0);

-- üè¢ Th√™m tr·∫°m quan tr·∫Øc n∆∞·ªõc (org)
INSERT INTO "org" ("name", "address", "city", "country", "created_at", "updated_at", "station_id") VALUES
('Tr·∫°m Quan Tr·∫Øc Mekong', '123 Mekong St', 'Can Tho', 'Vietnam', NOW(), NOW(), 1),
('Tr·∫°m Quan Tr·∫Øc Sai Gon', '456 Sai Gon St', 'Ho Chi Minh', 'Vietnam', NOW(), NOW(), 2),
('Tr·∫°m Quan Tr·∫Øc Hanoi', '789 Red River', 'Hanoi', 'Vietnam', NOW(), NOW(), 3);

-- üîç T·∫°o index tr√™n email ƒë·ªÉ tƒÉng t·ªëc truy v·∫•n
CREATE INDEX idx_users_email ON "users" (email);

-- üìå Insert System Admin (c√≥ to√†n quy·ªÅn)
INSERT INTO "users" ("email", "username", "full_name", "password_hash", "email_verified", "status", "is_admin", "kong_consumer_id", "created_at", "updated_at") VALUES
('admin@wqsys.com', 'sysadmin', 'System Admin', '$2a$10$ABCXYZ... (hashed)', TRUE, 'active', TRUE, '11111111-1111-1111-1111-111111111111', NOW(), NOW());

-- üìå Insert Admin c√°c tr·∫°m quan tr·∫Øc
INSERT INTO "users" ("email", "username", "full_name", "password_hash", "email_verified", "status", "is_admin", "kong_consumer_id", "created_at", "updated_at") VALUES
('mekong_admin@wqsys.com', 'mekong_admin', 'Mekong Station Admin', '$2a$10$DEFXYZ...', TRUE, 'active', FALSE, '22222222-2222-2222-2222-222222222222', NOW(), NOW()),
('saigon_admin@wqsys.com', 'saigon_admin', 'Saigon Station Admin', '$2a$10$GHIXYZ...', TRUE, 'active', FALSE, '33333333-3333-3333-3333-333333333333', NOW(), NOW()),
('hanoi_admin@wqsys.com', 'hanoi_admin', 'Hanoi Station Admin', '$2a$10$JKLXYZ...', TRUE, 'active', FALSE, '44444444-4444-4444-4444-444444444444', NOW(), NOW());

-- üìå Insert User b√¨nh th∆∞·ªùng
INSERT INTO "users" ("email", "username", "full_name", "password_hash", "email_verified", "status", "is_admin", "kong_consumer_id", "created_at", "updated_at") VALUES
('user1@wqsys.com', 'user1', 'User One', '$2a$10$MNOXYZ...', TRUE, 'active', FALSE, '55555555-5555-5555-5555-555555555555', NOW(), NOW()),
('user2@wqsys.com', 'user2', 'User Two', '$2a$10$PQRXYZ...', TRUE, 'active', FALSE, '66666666-6666-6666-6666-666666666666', NOW(), NOW());

-- -- üìå Insert th√™m user test
-- INSERT INTO "users" ("email", "username", "full_name", "password_hash", "email_verified", "status", "is_admin", "kong_consumer_id", "created_at", "updated_at") VALUES
-- ('user1@example.com', 'user1example', 'User One', '$2a$10$STUXYZ...', TRUE, 'active', FALSE, '01ede1e7-fdb4-4a67-bc67-a17e051f86d6', NOW(), NOW());

-- üîë G√°n users v√†o t·ªï ch·ª©c (org_user)
INSERT INTO "org_user" ("org_id", "user_id", "role") VALUES
-- System Admin (org = 0 nh∆∞ng c√≥ quy·ªÅn t·∫•t c·∫£)
(0, 1, 'system_admin'),

-- Admin t·ª´ng tr·∫°m
(1, 2, 'station_admin'),
(2, 3, 'station_admin'),
(3, 4, 'station_admin'),

-- User b√¨nh th∆∞·ªùng (org = 0)
(0, 5, 'users'),
(0, 6, 'users');

-- üõ† G√°n role cho users (user_role)
INSERT INTO "user_role" ("org_id", "role_id", "created_at", "user_id") VALUES
-- System Admin (c√≥ to√†n quy·ªÅn)
(0, 1, NOW(), 1),

-- Admin t·ª´ng tr·∫°m
(1, 2, NOW(), 2),
(2, 2, NOW(), 3),
(3, 2, NOW(), 4),

-- User b√¨nh th∆∞·ªùng
(0, 3, NOW(), 5),
(0, 3, NOW(), 6);

-- üîó Mapping users SSO (n·∫øu users d√πng OAuth Google)
INSERT INTO "user_sso" ("user_id", "auth_provider", "auth_id", "created_at") VALUES
-- User1 & User2 ƒëƒÉng nh·∫≠p b·∫±ng Google OAuth
-- (5, 'google', 'google-oauth-user1@wqsys.com', NOW()),
(6, 'google', 'google-oauth-user2@wqsys.com', NOW());

INSERT INTO "user_sso" ("user_id", "auth_provider", "auth_id", "created_at")
VALUES (5, 'google', 'google-oauth-user1@example.com', NOW());

-- ‚öôÔ∏è C·∫•u h√¨nh Google SSO
INSERT INTO "sso_setting" ("provider", "settings", "created_at", "updated_at", "is_deleted") VALUES
('google', '{"client_id": "759159252498-1tu1ben7amd25d8dfm2kljd3u05683i3.apps.googleusercontent.com", "client_secret": "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", "redirect_uri": "https://example.com/auth/callback"}', NOW(), NOW(), FALSE);

-- üîó Li√™n k·∫øt permission v·ªõi role
ALTER TABLE "permission"
ADD CONSTRAINT fk_permission_role FOREIGN KEY ("role_id") REFERENCES "role"("id") ON DELETE CASCADE;

-- üîó Li√™n k·∫øt user_role v·ªõi users, role, org
ALTER TABLE "user_role"
ADD CONSTRAINT fk_user_role_user FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE CASCADE,
ADD CONSTRAINT fk_user_role_role FOREIGN KEY ("role_id") REFERENCES "role"("id") ON DELETE CASCADE,
ADD CONSTRAINT fk_user_role_org FOREIGN KEY ("org_id") REFERENCES "org"("id") ON DELETE CASCADE;

-- üîó Li√™n k·∫øt org_user v·ªõi users v√† org
ALTER TABLE "org_user"
ADD CONSTRAINT fk_org_user_user FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE CASCADE,
ADD CONSTRAINT fk_org_user_org FOREIGN KEY ("org_id") REFERENCES "org"("id") ON DELETE CASCADE;

-- üîó Li√™n k·∫øt user_sso v·ªõi users
ALTER TABLE "user_sso"
ADD CONSTRAINT fk_user_sso_user FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE CASCADE;

-- üîó Li√™n k·∫øt login_attempt v·ªõi users (n·∫øu mu·ªën log ai ƒë√£ th·ª≠ ƒëƒÉng nh·∫≠p)
ALTER TABLE "login_attempt"
ADD CONSTRAINT fk_login_attempt_user FOREIGN KEY ("username") REFERENCES "users"("username") ON DELETE CASCADE;