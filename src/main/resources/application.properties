# ===============================
# üåç DATABASE CONFIGURATION
# ===============================
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432/user_dev}
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:my_secret_password}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
# ƒê·ªÉ Hibernate t·ª± update schema (c√≥ th·ªÉ set th√†nh `validate` ·ªü prod)

# ===============================
# üîí JWT CONFIGURATION
# ===============================
jwt.secret=${JWT_SECRET:my_jwt_secret}
jwt.expiration=${JWT_EXPIRATION:3600000}
# Token timeout (ms) - 1 gi·ªù
jwt.refresh-expiration=${JWT_REFRESH_EXPIRATION:604800000}
# 7 ng√†y (n·∫øu c√≥ refresh token)

# ===============================
# üîó OAUTH2 CONFIGURATION
# ===============================
spring.security.oauth2.client.registration.google.client-id=${OAUTH_GOOGLE_CLIENT_ID:your-client-id}
spring.security.oauth2.client.registration.google.client-secret=${OAUTH_GOOGLE_CLIENT_SECRET:your-client-secret}
spring.security.oauth2.client.registration.google.scope=openid, profile, email
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=email

# ===============================
# üî• KONG CONFIGURATION
# ===============================
kong.admin.url=${KONG_ADMIN_URL:http://localhost:8001}
kong.api.gateway.url=${KONG_API_GATEWAY_URL:http://localhost:8000}
kong.jwt.auth.enabled=${KONG_JWT_AUTH:true}

# ===============================
# üöÄ SERVER CONFIGURATION
# ===============================
server.port=${SERVER_PORT:8080}
server.servlet.context-path=/api/v0
